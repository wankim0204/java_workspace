package use;
import car.Truck;//사용하고자 하는 트럭 임포트 
import car.Bus;//사용하고자 하는 버스 임포트 
import car.Taxi;//사용하고자 하는 택시 임포트 

//만일 위에서 처럼 일일이 명시하는게 귀찮을 경우 한꺼번에도 할수 있어요 
//import car.*;  //다시 말하지만, *의 대상이 될수 있는건 패키지명이 아니라 클래스명입니다..
					//참고로 현업에서는 *를 잘 쓰지 않습니다..저렇게 해버리면  import에서 다루고자하는
					//기술이 무엇인지 빨리 해석이 안됩니다...따라서 따로 따로 해주시는것이 좋습니다.

class UseCar{
	public static void main(String[] args){
		//질문 드립니다..
		//만일 택시를 사용하고 싶을때, 부모인 Car클래스를 메모리에 별도로 new를 해줘야할까요?
		//아닐까요?  O ,X 퀴즈
		//정답: 자식을 .new 하면 js와같이  부모는 자동으로 인스턴스가 생성됩니다..
		//정말 그런지 보겠습니다. 
		Taxi t = new Taxi();//택시의 인스턴스 생성,  얼핏보기에는 택시만 생성될 것 같지만
									//택시보다 앞선 부모인  Car가 존재해야, 택시도 존재할 수 있기때문에
									//js 시절의 원리가 그대로 적용되어 Car인스턴스도 생성된다

		t.pass();//택시 메서드 호출되는지 확인해보세요 
		//그리고, 택시 클래스 코드안에는 없지만, Car클래스가 보유한 변수가 메서드 호출해봅시다.
		//만일 호출이 되면 Car인스턴스가 생성된게 증명되는 거에요~
		t.move();  //분명 move() 메서드는 택시에 없는데도 이게 호출된다면 택시가 부모님꺼를 맘대로
						//접근한 것이지요~
						//이미 js 시절에 상속을 맛봤기에 여러분들은 다 아시는 개념이죠? 
						//남은 시간에는  5분..상속관계에서 jvm 메모리에서 어떻게 생성되는지 그려드릴께요
		//UseCar클래스를 다시 실행해보세요
		//물론 Car를 컴파일 해주세요 
	}
}
