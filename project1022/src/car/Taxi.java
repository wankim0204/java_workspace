/*
택시를 정의합니다
*/
package car;
public class Taxi extends Car{
	/*이미 Car를 상속받았으므로, 여기서도 마찬가지로 택시만이 갖는 특징만 추가하면 됩니다.
	코드량이 현저히 줄고, 중복작성 하지 않아도 되므로 유지보수하기에 좋아요..oop언어의 목적은
	바로 상속입니당...
	*/
	//현재 택시 클래스에는 생성자가 있나요 ?? 여러분? 잇따 없다 ? 디폴트 생성자가 컴파일러에 의해
	//관여 됩니다..왜? 적어도 에러는 안나야 하니까요..
	/*
	눈에 보이지는 않지만, 컴파일러에 의해 디폴트 생성자가 아래와 같이 아무것도 없는 로직 상태로 
	존재하게 됩니다.. 그래야 new Taxi() 할때 에러가 안나니깐요..
	근데 문제가발생합니다..택시가 초기화하기 보다 앞서서 ,Car가 먼저 초기화가 되어야 
	상식적으로 이치에 맞지 않나요? 부모가 먼저 존재해야 하니깐요..
	그래서 sun 사에서는 눈에 보이지는 않지만, 자식의 디폴트 생성자에 보이지 않는 생성자 호출을 
	살짝 넣어둡니다..아래처럼요..
	public Taxi(){
		super();  //이 생성자 호출이 숨어 있어요!!!  
		super는 부모클래스를 의미하고  super()는 부모의 생성자를 의미합니다.(js랑 완전 같죠?)
		수업시작할께요~
		
		sun사에 의해 디폴트 생성자가 부모의 생성자를 호출하는지 증명을 해봅시다
		부모의 생성자에 무언가 동작여부를 확인할수 있는 코드를 넣어볼께요
		우리 예측이 맞죠? js랑 같습니다.
		근데, 부모인 Car에서 디폴트생성자가 아닌, 매개변수 있는 생성자만 둘 경우 조심해야 합니다.
		해볼께요
		Taxi클래스의 디폴트 생성자에서는 무조건 super()가 들어있으므로, 매개변수 없는 생성자인 
		Car()를 호출하고 있는 것과 같아요, 따라서 현재 Car에는 Car() 생성자 대신에 Car(String brand)
		만 존재하므로, 생성자 호출시 에러가 날겁니다..해결책은  js 시간에 알려드렸죠?
		여러분들이 해결해보세요 시간 1분 드립니다.

		해결책)  현재 디폴트 생성자는 우리에게 아무런 도움을 못 주므로, 이제 개발자가 주도해서 
		             원하는 생성자 호출을 직접 해야 합니다. 한마디로 디폴트 생성자에 의존하지 말라는 얘기에요
					 즉 방치하지 말라는 얘기입니다.
					 생성자 정의해주세요 
	}
	*/
	
	//부모의 매개변수 있는 생성자를 직접 호출해주기 위해, 개발자가 생성자를 정의하고 있는 것임
	/* 주석으로 막아보세요.,이렇게되면, 다시 컴파일러가 관여하겠죠? 디폴트 생성자를 만들고 그 안에서 
	super() 를 호출하게 될꺼에요,,위에서 처럼요..그렇게 되면 오버로딩된 생성자 중 두번째 꺼 
	디폴트 생성자를 호출하게 되서 에러가 안납니다..증명되었죠? Car클래스 컴파일하고 나서, Taxi  컴파일
	했을때 에러 안납니다~~!
	public Taxi(){
		super("Benz"); //매개변수 있는 생성자 호출합니다. 이렇게 하면 존재하는 생성자를 제대로 호출하는
		//것이므로, 더이상 에러가 안나겠죠? 현재Taxi 클래스 컴파일하시고  UseCar 다시 실행해보세요
	}
	*/
	
	//위와 같이 개발자가 직접 알맞는 생성자를 정의하는 방법을 추천하지만, 혹시 이런 경우도 있어요..
	//부모 클래스에 생성자를 여러개를 정의하는 거죠...그니깐 매개변수 있는것 없는것, 온갖 종류는 
	//다 정의해 놓는 거죠..오버로딩이죠
	
	//택시만이 갖는 특징 
	public void pass(){
		System.out.println("승객을 태워요");
	}
}
